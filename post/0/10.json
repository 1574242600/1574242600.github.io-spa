{"info":{"title":"[nodejs]koa框架 206 Partial Content","date":1586493600,"tags":"js"},"path":"./source/_posts/nodejs-http206.md","content":"<p>c，为什么koa它不直接支持206  </p>\n<!--more-->\n<h2 id=\"206-partial-content-是个什么玩意？\">206 Partial Content 是个什么玩意？</h2>\n<blockquote>\n<p>HTTP 206 Partial Content 成功状态响应代码表示请求已成功，并且主体包含所请求的数据区间，该数据区间是在请求的 Range 首部指定的。</p>\n<p>如果只包含一个数据区间，那么整个响应的 Content-Type 首部的值为所请求的文件的类型，同时包含  Content-Range 首部。</p>\n<p>如果包含多个数据区间，那么整个响应的  Content-Type  首部的值为 multipart/byteranges ，其中一个片段对应一个数据区间，并提供  Content-&gt; Range 和 Content-Type  描述信息。</p>\n<p> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206</a></p>\n</blockquote>\n<p>简单来说，就是获取服务端上，一个文件的部分内容，HTTP断点续传就是依赖的这玩意<br>注：本文并未实现  206 Partial Content的全部功能</p>\n<h2 id=\"头示例\">头示例</h2>\n<pre><code><span class=\"hljs-attribute\">GET</span> /localVideo/?token=<span class=\"hljs-number\">14</span>c<span class=\"hljs-number\">422</span>b<span class=\"hljs-number\">3623</span>a<span class=\"hljs-number\">69</span>dbc<span class=\"hljs-number\">831</span>c<span class=\"hljs-number\">4469794</span>e<span class=\"hljs-number\">7</span>a<span class=\"hljs-number\">2</span> HTTP/<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">Host</span>: <span class=\"hljs-number\">127.0.0.1:3000</span>\n<span class=\"hljs-attribute\">User</span>-Agent: Mozilla/<span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">0</span> (Windows NT <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">0</span>; Win<span class=\"hljs-number\">64</span>; x<span class=\"hljs-number\">64</span>; rv:<span class=\"hljs-number\">75</span>.<span class=\"hljs-number\">0</span>) Gecko/<span class=\"hljs-number\">20100101</span> Firefox/<span class=\"hljs-number\">75</span>.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">Accept</span>: video/webm,video/ogg,video/*;q=<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">9</span>,application/ogg;q=<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">7</span>,audio/*;q=<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">6</span>,*/*;q=<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">Range</span>: bytes=<span class=\"hljs-number\">0</span>-\n<span class=\"hljs-attribute\">Connection</span>: keep-alive\n</code></pre>\n<h3 id=\"range-字节数（bytes）开始-结束\">Range: 字节数（bytes）=(开始)-(结束)</h3>\n<p>这是浏览器告知服务器所需分部分内容范围的消息头。 注意开始和结束位置是都包括在内的，这个头也只发送一个位置，其含义如下:  </p>\n<ul>\n<li>如果只发送开始位置，服务器会返回从声明的开始位置到服务器设置的数据区间长度+开始位置的数据  </li>\n<li>如果只发送结束位置，结束位置参数可以被描述成从最后一个可用的字节算起可以被服务器返回的字节数  </li>\n</ul>\n<pre><code><span class=\"hljs-attribute\">HTTP</span>/<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">206</span> Partial Content\n<span class=\"hljs-attribute\">Content</span>-Type: video/mp<span class=\"hljs-number\">4</span>\n<span class=\"hljs-attribute\">Content</span>-Range: bytes <span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">3145729</span>/<span class=\"hljs-number\">24332262</span>\n<span class=\"hljs-attribute\">Accept</span>-Ranges: bytes\n<span class=\"hljs-attribute\">Content</span>-Length: <span class=\"hljs-number\">3145729</span>\n<span class=\"hljs-attribute\">Connection</span>: keep-alive</code></pre>\n<h3 id=\"content-range：字节数（bytes）开始-结束总长度\">Content-Range：字节数（bytes）=(开始)-(结束)/(总长度)</h3>\n<p>服务器返回当前数据区间开始结束位置，文件总长度</p>\n<h3 id=\"accept-ranges-字节（bytes）\">Accept-Ranges: 字节（bytes）</h3>\n<p>声明数据存储单位 ，然而只能用bytes这一个单位</p>\n<h3 id=\"content-length-3145729\">Content-Length: 3145729</h3>\n<p>此次数据长度</p>\n<h2 id=\"koa-实现部分功能\">koa 实现部分功能</h2>\n<pre><code class=\"language-js\">/**\n * <span class=\"hljs-number\">206</span> Partial Content\n * <span class=\"hljs-built_in\">@name</span> http206\n * @param ctx  object Koa Context\n * @param<span class=\"hljs-built_in\"> path</span> <span class=\"hljs-built_in\"> string</span> 文件路径\n * @<span class=\"hljs-keyword\">return</span> steam\n */\nconst http206 = async (ctx<span class=\"hljs-built_in\">,path</span>) =&gt; {\n    <span class=\"hljs-keyword\">let</span> Range = ctx.request.get(<span class=\"hljs-string\">&#x27;Range&#x27;</span>);\n    <span class=\"hljs-keyword\">let</span> file = fs.statSync<span class=\"hljs-built_in\">(path</span>);\n    <span class=\"hljs-keyword\">let</span> fileSize = file.size;\n\n    <span class=\"hljs-keyword\">let</span> parts = Range<span class=\"hljs-built_in\">.replace</span>(/bytes=/, <span class=\"hljs-string\">&quot;&quot;</span>).split(<span class=\"hljs-string\">&quot;-&quot;</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">start</span> = parts[<span class=\"hljs-number\">0</span>] ? Number(parts[<span class=\"hljs-number\">0</span>]) : <span class=\"hljs-number\">0</span>;\n    //当请求字段Range结束位置为<span class=\"hljs-number\">0</span>时，这里长度为<span class=\"hljs-number\">3</span>mb,请根据需要调整\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">end</span> = parts[<span class=\"hljs-number\">1</span>] ? Number(parts[<span class=\"hljs-number\">1</span>]) : <span class=\"hljs-keyword\">start</span> + <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">3</span>;  \n    <span class=\"hljs-keyword\">end</span> = <span class=\"hljs-keyword\">end</span> &gt; fileSize - <span class=\"hljs-number\">1</span> ? fileSize - <span class=\"hljs-number\">1</span> : <span class=\"hljs-keyword\">end</span>;           //当结束位置大于文件长度-<span class=\"hljs-number\">1</span>时，结束位置 = 文件长度 - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">let</span> chunksize = (<span class=\"hljs-keyword\">end</span> - <span class=\"hljs-keyword\">start</span>) + <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">let</span> headers = {\n        <span class=\"hljs-string\">&#x27;Content-Range&#x27;</span>: `bytes ${<span class=\"hljs-keyword\">start</span>}-${<span class=\"hljs-keyword\">end</span>}/${fileSize}`,\n        <span class=\"hljs-string\">&#x27;Accept-Ranges&#x27;</span>: <span class=\"hljs-string\">&#x27;bytes&#x27;</span>,\n        <span class=\"hljs-string\">&#x27;Content-Length&#x27;</span>: chunksize,\n        <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:  mime类型,\n    };\n\n    //console.log(headers);\n    ctx.response.status = <span class=\"hljs-number\">206</span>;\n    ctx.set(headers);\n    //请根据需要处理异常\n    <span class=\"hljs-keyword\">return</span> fs.createReadStream<span class=\"hljs-built_in\">(path</span>,{<span class=\"hljs-keyword\">start</span>,<span class=\"hljs-keyword\">end</span>})\n};</code></pre>\n<p><img src=\"https://nworm.icu/pan/%E5%9B%BE%E7%89%87/http206.png\" alt=\"\"></p>\n","nav":[[2,"206 Partial Content 是个什么玩意？"],[2,"头示例"],[3,"Range: 字节数（bytes）=(开始)-(结束)"],[3,"Content-Range：字节数（bytes）=(开始)-(结束)/(总长度)"],[3,"Accept-Ranges: 字节（bytes）"],[3,"Content-Length: 3145729"],[2,"koa 实现部分功能"]]}